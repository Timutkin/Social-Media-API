{
  "openapi": "3.0.1",
  "info": {
    "title": "Social Media API",
    "description": "The goal of the project: To develop a RESTful API for a social media platform that allows users to register, log in, create posts, correspond, subscribe to other users and receive their activity feed.",
    "contact": {
      "name": "Timofey Utkin",
      "email": "timofey_utkin@vk.com"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:2000",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/api/v1/posts": {
      "get": {
        "tags": [
          "A Post management APIs"
        ],
        "summary": "Gets a all posts of users order by created desc",
        "description": "page: the index of page that we want to retrieve – the parameter is zero-indexed and its default value is 0\nsize: the number of pages that we want to retrieve – the default value is 20\nsort: one or more properties that we can use for sorting the results, using the following format:\nproperty1,property2(,asc|desc) – for instance, ?sort=name&sort=email,asc\n",
        "operationId": "findAll",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The posts was successfully received",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "A Post management APIs"
        ],
        "summary": "Creates a post",
        "operationId": "createPost",
        "parameters": [
          {
            "name": "header",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "images",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The post was successfully created ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error: the text or header is empty or consists of spaces.The transmitted image, the images should not be empty, should be in the format : png, jpg, jpeg. Also , there should not be more than three photos .",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "A Post management APIs"
        ],
        "summary": "Updates a post by post_id",
        "operationId": "updatePost",
        "parameters": [
          {
            "name": "post_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "header",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The post was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error: the text or header consists of spaces or post id is less than or equal to zero.Either the post is not found, or it does not belong to an authorized user ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/messages/add/{userId}": {
      "post": {
        "tags": [
          "An Messaging management APIs"
        ],
        "summary": "Sends a messaging request to user with userId",
        "operationId": "sendRequestToMessaging",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The messaging request was successfully sent",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The user is trying to send a correspondence request to a non-existent user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          },
          "409": {
            "description": "The user has already sent a correspondence request to the specified user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/images": {
      "post": {
        "tags": [
          "A image management APIs"
        ],
        "summary": "Adds an image to the post",
        "operationId": "addImageToPost",
        "parameters": [
          {
            "name": "post_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "image"
                ],
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The image was successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error: id is less than or equal to zero. Either the post is not found, or it does not belong to an authorized user.The transmitted image should not be empty, should be in the format : png, jpg, jpeg.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "A image management APIs"
        ],
        "summary": "Deletes an image from a post by image id",
        "operationId": "deleteImageByPostId",
        "parameters": [
          {
            "name": "image_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "post_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The image was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error: id is less than or equal to zero. Either the post is not found, or it does not belong to an authorized user or image not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/friends/reject/{fromUserId}": {
      "post": {
        "tags": [
          "An Friendship management APIs"
        ],
        "summary": "Rejects a friend request to user with userId",
        "description": "If the users have not been friends before, then the user rejects the request\nIf the users were previously friends, then the user is removed from friends\n",
        "operationId": "rejectFriendRequest",
        "parameters": [
          {
            "name": "fromUserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The friend request was successfully rejected",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The friend request from the specified user was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/friends/receive/{userId}": {
      "post": {
        "tags": [
          "An Friendship management APIs"
        ],
        "summary": "Receives a friend request to user with userId",
        "operationId": "receiveFriendRequest",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The friend request was successfully removed",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The application from the specified user was not found ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          },
          "409": {
            "description": "The user has already been added to friends",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/friends/add/{userId}": {
      "post": {
        "tags": [
          "An Friendship management APIs"
        ],
        "summary": "Sends a friend request to user with userId",
        "operationId": "sendRequestToFriendship",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The friend request was successfully sent",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          },
          "409": {
            "description": "The user is trying to send an application to himself,or you have already accepted the application as a friend",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "An Auth management APIs "
        ],
        "summary": "Registers the user",
        "description": "The username, as well as the password, must be unique. The password must contain at least one uppercase and lowercase letter, one digit and a special character (!@#$%^&*()). It should also be between 8 and 20 characters long.",
        "operationId": "registerUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The user was successfully registered ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error: the username or email is empty or consists of spaces. Correct email format : utkin@mail.ru ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Username or email already in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/signin": {
      "post": {
        "tags": [
          "An Auth management APIs "
        ],
        "summary": "Authorizes the user",
        "operationId": "authenticateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The user was successfully authorizes the user ",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username or password specified",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/my": {
      "get": {
        "tags": [
          "A Post management APIs"
        ],
        "summary": "Gets a all posts of auth user order by created desc",
        "description": "page: the index of page that we want to retrieve – the parameter is zero-indexed and its default value is 0\nsize: the number of pages that we want to retrieve – the default value is 20\nsort: one or more properties that we can use for sorting the results, using the following format:\nproperty1,property2(,asc|desc) – for instance, ?sort=name&sort=email,asc\n",
        "operationId": "findMyPosts",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The posts was successfully received",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/images/{imageId}": {
      "get": {
        "tags": [
          "A image management APIs"
        ],
        "summary": "Gets an image by image id",
        "operationId": "getImageById",
        "parameters": [
          {
            "name": "imageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The image was successfully received",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error: id is less than or equal to zero or image not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "image/png": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte"
                  }
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/friends": {
      "get": {
        "tags": [
          "An Friendship management APIs"
        ],
        "summary": "Gets all friends of user",
        "operationId": "getAllFriendsId",
        "responses": {
          "200": {
            "description": "The friends was successfully received",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/friends/requests/to_users": {
      "get": {
        "tags": [
          "An Friendship management APIs"
        ],
        "summary": "Gets all friends requests TO another users",
        "operationId": "getAllToFriendRequests",
        "responses": {
          "200": {
            "description": "The friend requests was successfully received",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FriendToRequestDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/friends/requests/from_users": {
      "get": {
        "tags": [
          "An Friendship management APIs"
        ],
        "summary": "Gets all friends requests FROM another users",
        "operationId": "getAllFromFriendRequests",
        "responses": {
          "200": {
            "description": "The friend requests was successfully received",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FriendFromRequestDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/activity": {
      "get": {
        "tags": [
          "An activity feed management APIs"
        ],
        "summary": "Gets all post of user which are subscribed to an authorized user",
        "description": "page: the index of page that we want to retrieve – the parameter is zero-indexed and its default value is 0\nsize: the number of pages that we want to retrieve – the default value is 20\nsort: one or more properties that we can use for sorting the results, using the following format:\nproperty1,property2(,asc|desc) – for instance, ?sort=name&sort=email,asc\n",
        "operationId": "getFeedActivity",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The all posts was successfully received",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/{post_id}": {
      "delete": {
        "tags": [
          "A Post management APIs"
        ],
        "summary": "Deletes a post by post_id",
        "operationId": "deletePostById",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The post was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error: id is less than or equal to zero. Either the post is not found, or it does not belong to an authorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/friends/remove/{userId}": {
      "delete": {
        "tags": [
          "An Friendship management APIs"
        ],
        "summary": "Removes a friend request to user with userId",
        "operationId": "removeRequestToFriendship",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The friend request was successfully removed",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The application to the specified user was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HttpServletResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "HttpServletResponse": {
        "type": "object",
        "properties": {
          "headerNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "trailerFields": {
            "type": "object"
          },
          "locale": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "variant": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "unicodeLocaleKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "extensionKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "iso3Language": {
                "type": "string"
              },
              "iso3Country": {
                "type": "string"
              }
            }
          },
          "outputStream": {
            "$ref": "#/components/schemas/ServletOutputStream"
          },
          "contentType": {
            "type": "string"
          },
          "contentLength": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "bufferSize": {
            "type": "integer",
            "format": "int32"
          },
          "contentLengthLong": {
            "type": "integer",
            "format": "int64",
            "writeOnly": true
          },
          "characterEncoding": {
            "type": "string"
          },
          "writer": {
            "type": "object"
          },
          "committed": {
            "type": "boolean"
          }
        }
      },
      "ServletOutputStream": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          },
          "writeListener": {
            "$ref": "#/components/schemas/WriteListener"
          }
        }
      },
      "WriteListener": {
        "type": "object"
      },
      "PostDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "header": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "authorUsername": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SignupRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FriendToRequestDto": {
        "type": "object",
        "properties": {
          "receiverId": {
            "type": "integer",
            "format": "int64"
          },
          "friendRequestStatus": {
            "type": "string",
            "enum": [
              "PENDING",
              "ACCEPTED",
              "REJECTED"
            ]
          }
        }
      },
      "FriendFromRequestDto": {
        "type": "object",
        "properties": {
          "senderId": {
            "type": "integer",
            "format": "int64"
          },
          "friendRequestStatus": {
            "type": "string",
            "enum": [
              "PENDING",
              "ACCEPTED",
              "REJECTED"
            ]
          }
        }
      }
    }
  }
}